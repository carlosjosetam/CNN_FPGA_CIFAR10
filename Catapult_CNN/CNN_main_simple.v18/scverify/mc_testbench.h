// ----------------------------------------------------------------------------
// SystemC Testbench Header
//
//    HLS version: 10.1b/747384 Production Release
//       HLS date: Wed Nov  1 10:26:06 PDT 2017
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 8.0a
//
//   Generated by: xph3sei710@ocaepc56
// Generated date: Fri Jan 25 10:40:03 CET 2019
//
// ----------------------------------------------------------------------------
#ifdef CCS_SCVERIFY

// 
// -------------------------------------
// testbench
// User supplied testbench
// -------------------------------------
// 
#ifndef INCLUDED_TESTBENCH_H
#define INCLUDED_TESTBENCH_H

extern void mc_testbench_image_skip(bool v);
extern void mc_testbench_F_1_skip(bool v);
extern void mc_testbench_B_1_skip(bool v);
extern void mc_testbench_F_2_skip(bool v);
extern void mc_testbench_B_2_skip(bool v);
extern void mc_testbench_F_3_skip(bool v);
extern void mc_testbench_B_3_skip(bool v);
extern void mc_testbench_P_W_skip(bool v);
extern void mc_testbench_P_B_skip(bool v);
extern void mc_testbench_index_skip(bool v);

#ifndef SC_USE_STD_STRING
#define SC_USE_STD_STRING
#endif

#include "/tp/xph3sei/xph3sei710/Documents/CNN_FPGA_CIFAR10/HLS/CNN_c/include/define.h"
#include "/tp/xph3sei/xph3sei710/Documents/CNN_FPGA_CIFAR10/HLS/CNN_c/include/CNN_TYPES.h"
#include "/tp/xph3sei/xph3sei710/Documents/CNN_FPGA_CIFAR10/HLS/CNN_c/include/coeffs_simple.h"
#include "/tp/xph3sei/xph3sei710/Documents/CNN_FPGA_CIFAR10/HLS/CNN_c/include/labels.h"
#include <systemc.h>
#include <tlm.h>
#include <ac_int.h>
#include <ac_fixed.h>
#include <mc_container_types.h>
#include <mc_typeconv.h>
#include <mc_transactors.h>
#include <mc_comparator.h>
#include <mc_end_of_testbench.h>
#include <vector>


class testbench : public sc_module
{
public:
   // Interface Ports
   sc_in< bool > clk;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_fixed<16, 4, true, AC_TRN, AC_SAT >,1728> > > ccs_image;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_image;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_fixed<16, 4, true, AC_TRN, AC_SAT >,1728> > > ccs_F_1;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_F_1;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_fixed<16, 4, true, AC_TRN, AC_SAT >,64> > > ccs_B_1;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_B_1;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_fixed<16, 4, true, AC_TRN, AC_SAT >,18432> > > ccs_F_2;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_F_2;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_fixed<16, 4, true, AC_TRN, AC_SAT >,32> > > ccs_B_2;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_B_2;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_fixed<16, 4, true, AC_TRN, AC_SAT >,5760> > > ccs_F_3;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_F_3;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_fixed<16, 4, true, AC_TRN, AC_SAT >,20> > > ccs_B_3;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_B_3;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_fixed<16, 4, true, AC_TRN, AC_SAT >,1800> > > ccs_P_W;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_P_W;
   sc_port< tlm::tlm_fifo_put_if< mgc_sysc_ver_array1D<ac_fixed<16, 4, true, AC_TRN, AC_SAT >,10> > > ccs_P_B;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_P_B;
   sc_port< tlm::tlm_fifo_get_if< mgc_sysc_ver_array1D<ac_int<4, false >,1> > > ccs_index;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_index;
   sc_in< bool > design_is_idle;
   sc_out< sc_logic > enable_stalls;
   sc_in< unsigned short > stall_coverage;
   
   // Data objects
   bool testbench_ended;
   int main_exit_code;
   bool atleast_one_active_input;
   sc_time last_event_time;
   sc_time last_event_time2;
   sc_signal< bool >                          cpp_testbench_active;
   sc_event testbench_end_event;
   int argc;
   const char* const *argv;
   bool _checked_results;
   bool _failed;
   static testbench* that;
   int main();
   static bool enable_idle_sync_mode;
   static unsigned short idle_sync_stable_cycles;
   static bool image_ignore;
   static bool image_skip;
   static bool image_skip_quiet;
   static bool image_skip_once;
   static bool image_skip_noerr;
   static int image_array_comp_first;
   static int image_array_comp_last;
   bool _capture_image;
   static mc_wait_ctrl image_wait_ctrl;
   int image_capture_count;
   int image_iteration_count;
   static bool F_1_ignore;
   static bool F_1_skip;
   static bool F_1_skip_quiet;
   static bool F_1_skip_once;
   static bool F_1_skip_noerr;
   static int F_1_array_comp_first;
   static int F_1_array_comp_last;
   bool _capture_F_1;
   static mc_wait_ctrl F_1_wait_ctrl;
   int F_1_capture_count;
   int F_1_iteration_count;
   static bool B_1_ignore;
   static bool B_1_skip;
   static bool B_1_skip_quiet;
   static bool B_1_skip_once;
   static bool B_1_skip_noerr;
   static int B_1_array_comp_first;
   static int B_1_array_comp_last;
   bool _capture_B_1;
   static mc_wait_ctrl B_1_wait_ctrl;
   int B_1_capture_count;
   int B_1_iteration_count;
   static bool F_2_ignore;
   static bool F_2_skip;
   static bool F_2_skip_quiet;
   static bool F_2_skip_once;
   static bool F_2_skip_noerr;
   static int F_2_array_comp_first;
   static int F_2_array_comp_last;
   bool _capture_F_2;
   static mc_wait_ctrl F_2_wait_ctrl;
   int F_2_capture_count;
   int F_2_iteration_count;
   static bool B_2_ignore;
   static bool B_2_skip;
   static bool B_2_skip_quiet;
   static bool B_2_skip_once;
   static bool B_2_skip_noerr;
   static int B_2_array_comp_first;
   static int B_2_array_comp_last;
   bool _capture_B_2;
   static mc_wait_ctrl B_2_wait_ctrl;
   int B_2_capture_count;
   int B_2_iteration_count;
   static bool F_3_ignore;
   static bool F_3_skip;
   static bool F_3_skip_quiet;
   static bool F_3_skip_once;
   static bool F_3_skip_noerr;
   static int F_3_array_comp_first;
   static int F_3_array_comp_last;
   bool _capture_F_3;
   static mc_wait_ctrl F_3_wait_ctrl;
   int F_3_capture_count;
   int F_3_iteration_count;
   static bool B_3_ignore;
   static bool B_3_skip;
   static bool B_3_skip_quiet;
   static bool B_3_skip_once;
   static bool B_3_skip_noerr;
   static int B_3_array_comp_first;
   static int B_3_array_comp_last;
   bool _capture_B_3;
   static mc_wait_ctrl B_3_wait_ctrl;
   int B_3_capture_count;
   int B_3_iteration_count;
   static bool P_W_ignore;
   static bool P_W_skip;
   static bool P_W_skip_quiet;
   static bool P_W_skip_once;
   static bool P_W_skip_noerr;
   static int P_W_array_comp_first;
   static int P_W_array_comp_last;
   bool _capture_P_W;
   static mc_wait_ctrl P_W_wait_ctrl;
   int P_W_capture_count;
   int P_W_iteration_count;
   static bool P_B_ignore;
   static bool P_B_skip;
   static bool P_B_skip_quiet;
   static bool P_B_skip_once;
   static bool P_B_skip_noerr;
   static int P_B_array_comp_first;
   static int P_B_array_comp_last;
   bool _capture_P_B;
   static mc_wait_ctrl P_B_wait_ctrl;
   int P_B_capture_count;
   int P_B_iteration_count;
   static bool index_ignore;
   static bool index_skip;
   static bool index_skip_quiet;
   static bool index_skip_once;
   static bool index_skip_noerr;
   static int index_array_comp_first;
   static int index_array_comp_last;
   static bool index_use_mask;
   static ac_int<4, false > index_output_mask;
   tlm::tlm_fifo< mc_golden_info< mgc_sysc_ver_array1D<ac_int<4, false >,1>, ac_int<4, false > > > index_golden;
   bool _capture_index;
   static mc_wait_ctrl index_wait_ctrl;
   int index_capture_count;
   int index_iteration_count;
   int wait_cnt;
   
   // Named Objects
   
   // Module instance pointers
   mc_comparator< mgc_sysc_ver_array1D<ac_int<4, false >,1> , ac_int<4, false > > *index_comp;
   
   // Declare processes (SC_METHOD and SC_THREAD)
   void wait_for_end();
   void run();
   
   // Constructor
   SC_HAS_PROCESS(testbench);
   testbench(
      const sc_module_name& name
   )
      : clk("clk")
      , ccs_image("ccs_image")
      , ccs_wait_ctrl_image("ccs_wait_ctrl_image")
      , ccs_F_1("ccs_F_1")
      , ccs_wait_ctrl_F_1("ccs_wait_ctrl_F_1")
      , ccs_B_1("ccs_B_1")
      , ccs_wait_ctrl_B_1("ccs_wait_ctrl_B_1")
      , ccs_F_2("ccs_F_2")
      , ccs_wait_ctrl_F_2("ccs_wait_ctrl_F_2")
      , ccs_B_2("ccs_B_2")
      , ccs_wait_ctrl_B_2("ccs_wait_ctrl_B_2")
      , ccs_F_3("ccs_F_3")
      , ccs_wait_ctrl_F_3("ccs_wait_ctrl_F_3")
      , ccs_B_3("ccs_B_3")
      , ccs_wait_ctrl_B_3("ccs_wait_ctrl_B_3")
      , ccs_P_W("ccs_P_W")
      , ccs_wait_ctrl_P_W("ccs_wait_ctrl_P_W")
      , ccs_P_B("ccs_P_B")
      , ccs_wait_ctrl_P_B("ccs_wait_ctrl_P_B")
      , ccs_index("ccs_index")
      , ccs_wait_ctrl_index("ccs_wait_ctrl_index")
      , design_is_idle("design_is_idle")
      , enable_stalls("enable_stalls")
      , stall_coverage("stall_coverage")
      , cpp_testbench_active("cpp_testbench_active")
      , index_golden("index_golden",-1)
   {
      // Instantiate other modules
      index_comp = new mc_comparator< mgc_sysc_ver_array1D<ac_int<4, false >,1> , ac_int<4, false > > (
         "index_comp",
         "index",
         0,
         0,
         1
      );
      index_comp->data_in(ccs_index);
      index_comp->data_golden(index_golden);
      
      
      // Register processes
      SC_METHOD(wait_for_end);
      sensitive << clk.pos() << testbench_end_event;
      SC_THREAD(run);
      // Other constructor statements
      set_stack_size(64000000);
      argc = sc_argc();
      argv = sc_argv();
      _checked_results = false;
      that = this;
      testbench_ended = false;
      main_exit_code = 0;
      atleast_one_active_input = true;
      _capture_image = true;
      _capture_F_1 = true;
      _capture_B_1 = true;
      _capture_F_2 = true;
      _capture_B_2 = true;
      _capture_F_3 = true;
      _capture_B_3 = true;
      _capture_P_W = true;
      _capture_P_B = true;
      _capture_index = true;
      wait_cnt = 0;
   }
   
   ~testbench()
   {
      delete index_comp;
      index_comp = 0;
   }
   
   // C++ class functions
   public:
      static void wait_for_idle_sync() ;
   public:
      static void set_enable_stalls(bool flag) ;
   public:
      void capture_image( ac_fixed<16, 4, true, AC_TRN, AC_SAT > image[1728]) ;
   public:
      void capture_F_1( ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_1[1728]) ;
   public:
      void capture_B_1( ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_1[64]) ;
   public:
      void capture_F_2( ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_2[18432]) ;
   public:
      void capture_B_2( ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_2[32]) ;
   public:
      void capture_F_3( ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_3[5760]) ;
   public:
      void capture_B_3( ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_3[20]) ;
   public:
      void capture_P_W( ac_fixed<16, 4, true, AC_TRN, AC_SAT > P_W[1800]) ;
   public:
      void capture_P_B( ac_fixed<16, 4, true, AC_TRN, AC_SAT > P_B[10]) ;
   public:
      void capture_index( ac_int<4, false > index[1]) ;
   protected:
      void wait_on_input_required() ;
   public:
      static void capture_IN( ac_fixed<16, 4, true, AC_TRN, AC_SAT > image[1728],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_1[1728],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_1[64],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_2[18432],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_2[32],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_3[5760],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_3[20],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > P_W[1800],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > P_B[10],  ac_int<4, false > index[1]) ;
   public:
      static void capture_OUT( ac_fixed<16, 4, true, AC_TRN, AC_SAT > image[1728],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_1[1728],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_1[64],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_2[18432],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_2[32],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_3[5760],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_3[20],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > P_W[1800],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > P_B[10],  ac_int<4, false > index[1]) ;
   public:
      static void exec_CNN_main_simple( ac_fixed<16, 4, true, AC_TRN, AC_SAT > image[1728],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_1[1728],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_1[64],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_2[18432],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_2[32],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > F_3[5760],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > B_3[20],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > P_W[1800],  ac_fixed<16, 4, true, AC_TRN, AC_SAT > P_B[10],  ac_int<4, false > index[1]) ;
   protected:
      void start_of_simulation() ;
   protected:
      void end_of_simulation() ;
   public:
      void check_results() ;
   public:
      bool failed() ;
};
#endif
#endif
