// ----------------------------------------------------------------------
//  HLS HDL:        SystemC Netlister
//  HLS Version:    2011a.62 Production Release
//  HLS Date:       Wed Nov 23 15:08:20 PST 2011
// 
//  Generated by:   xph3seiaba@cimeld20
//  Generated date: Fri Oct 24 14:18:54 2014
// ----------------------------------------------------------------------

// 


#define SC_USE_STD_STRING
#define SC_INCLUDE_DYNAMIC_PROCESSES
//Library is: mgc_hls
//Included from library 'mgc_hls'
#include <funcs.h>
//Included from library 'mgc_hls'
#include <mc_interface_channel.h>
//Included from library 'mgc_hls'
#include <mgc_ioport.h>
namespace HDL { 

#ifndef MC_PROCESS_STACK_SIZE
#define MC_PROCESS_STACK_SIZE 0x80000
#endif
// ------------------------------------------------------------------
//  Design Unit:    lab1_core
// ------------------------------------------------------------------



SC_MODULE(lab1_core) {
  public : sc_in< bool > clk;
  public : sc_in< sc_logic > rst;
  public : sc_in< sc_lv<256> > a_rsc_mgc_in_wire_d;
  public : sc_in< sc_lv<256> > b_rsc_mgc_in_wire_d;
  public : sc_out< sc_lv<256> > c_rsc_mgc_out_stdreg_d;
  private: mc_out< sc_lv<256> > c_rsc_mgc_out_stdreg_d_drv;

  // Default Constants


  SC_HAS_PROCESS(lab1_core);
  public: lab1_core(const sc_module_name& module_name, const char * hdl_name=0) :
      sc_module(module_name)
    , clk("clk")
    , rst("rst")
    , a_rsc_mgc_in_wire_d("a_rsc_mgc_in_wire_d")
    , b_rsc_mgc_in_wire_d("b_rsc_mgc_in_wire_d")
    , c_rsc_mgc_out_stdreg_d("c_rsc_mgc_out_stdreg_d")
    , c_rsc_mgc_out_stdreg_d_drv(c_rsc_mgc_out_stdreg_d)
  {
    // Default Constant Signal Assignments

    SC_THREAD(core); 
    set_stack_size(MC_PROCESS_STACK_SIZE); 
  }

private:
  void core() { 
    // Interconnect Declarations
    sc_lv<32> c_rsc_d_1_sg3_lpi_1;
    sc_lv<32> c_rsc_d_1_sg4_lpi_1;
    sc_lv<32> c_rsc_d_1_sg2_lpi_1;
    sc_lv<32> c_rsc_d_1_sg5_lpi_1;
    sc_lv<32> c_rsc_d_1_sg1_lpi_1;
    sc_lv<32> c_rsc_d_1_sg6_lpi_1;
    sc_lv<32> c_rsc_d_2_lpi_1;
    sc_lv<32> c_rsc_d_1_sg7_lpi_1;
    sc_lv<32> ACC_acc_4_cmx_sva;
    sc_logic equal_tmp;
    sc_logic equal_tmp_1;
    sc_logic equal_tmp_2;
    sc_logic equal_tmp_3;
    sc_logic equal_tmp_4;
    sc_logic equal_tmp_5;
    sc_logic equal_tmp_6;
    sc_lv<32> io_read_c_rsc_d_sdt_sg7_lpi_1_dfm;
    sc_lv<32> io_read_c_rsc_d_sdt_sg6_lpi_1_dfm;
    sc_lv<32> io_read_c_rsc_d_sdt_sg5_lpi_1_dfm;
    sc_lv<32> io_read_c_rsc_d_sdt_sg4_lpi_1_dfm;
    sc_lv<32> io_read_c_rsc_d_sdt_sg3_lpi_1_dfm;
    sc_lv<32> io_read_c_rsc_d_sdt_sg2_lpi_1_dfm;
    sc_lv<32> io_read_c_rsc_d_sdt_sg1_lpi_1_dfm;
    sc_lv<32> io_read_c_rsc_d_sdt_2_lpi_1_dfm;
    sc_lv<4> ACC_i_1_sva_1;
    sc_lv<256> ACC_io_read_a_rsc_d_sdt;
    sc_lv<256> ACC_io_read_b_rsc_d_sdt;
    sc_lv<3> ACC_i_1_sva_2;

    while ( 1 ) { // from nhl_block_start core
      while ( 1 ) { // from nhl_loop_open main
        main_CONTINUE:
        // C-Step 0 of Loop 'main'
        c_rsc_d_1_sg7_lpi_1 = io_read_c_rsc_d_sdt_sg7_lpi_1_dfm;
        c_rsc_d_2_lpi_1 = io_read_c_rsc_d_sdt_2_lpi_1_dfm;
        c_rsc_d_1_sg6_lpi_1 = io_read_c_rsc_d_sdt_sg6_lpi_1_dfm;
        c_rsc_d_1_sg1_lpi_1 = io_read_c_rsc_d_sdt_sg1_lpi_1_dfm;
        c_rsc_d_1_sg5_lpi_1 = io_read_c_rsc_d_sdt_sg5_lpi_1_dfm;
        c_rsc_d_1_sg2_lpi_1 = io_read_c_rsc_d_sdt_sg2_lpi_1_dfm;
        c_rsc_d_1_sg4_lpi_1 = io_read_c_rsc_d_sdt_sg4_lpi_1_dfm;
        c_rsc_d_1_sg3_lpi_1 = io_read_c_rsc_d_sdt_sg3_lpi_1_dfm;
        ACC_i_1_sva_2 = CONV_STD_LOGIC_VECTOR(0, 3);
        wait(clk.posedge_event());
        if (( mc_bool(rst.read()))) goto main;
        // C-Step 1 of Loop 'main'
        while ( 1 ) { // from nhl_loop_open ACC
          ACC_CONTINUE:
          // C-Step 0 of Loop 'ACC'
          wait(clk.posedge_event());
          if (( mc_bool(rst.read()))) goto main;
          // C-Step 1 of Loop 'ACC'
          ACC_io_read_a_rsc_d_sdt = a_rsc_mgc_in_wire_d.read();
          ACC_io_read_b_rsc_d_sdt = b_rsc_mgc_in_wire_d.read();
          ACC_acc_4_cmx_sva = CONV_STD_LOGIC_VECTOR((sc_int<32>)(SIGNED(MUX_v(CONV_STD_LOGIC_VECTOR((CONV_STD_LOGIC_VECTOR((CONV_STD_LOGIC_VECTOR((((sc_lv<32>)ACC_io_read_a_rsc_d_sdt.range(31,
              0)) , ((sc_lv<32>)ACC_io_read_a_rsc_d_sdt.range(63, 32))), 64) , CONV_STD_LOGIC_VECTOR((((sc_lv<32>)ACC_io_read_a_rsc_d_sdt.range(95,
              64)) , ((sc_lv<32>)ACC_io_read_a_rsc_d_sdt.range(127, 96))), 64)),
              128) , CONV_STD_LOGIC_VECTOR((CONV_STD_LOGIC_VECTOR((((sc_lv<32>)ACC_io_read_a_rsc_d_sdt.range(159,
              128)) , ((sc_lv<32>)ACC_io_read_a_rsc_d_sdt.range(191, 160))), 64)
              , CONV_STD_LOGIC_VECTOR((((sc_lv<32>)ACC_io_read_a_rsc_d_sdt.range(223,
              192)) , ((sc_lv<32>)ACC_io_read_a_rsc_d_sdt.range(255, 224))), 64)),
              128)), 256), ACC_i_1_sva_2)) + SIGNED(MUX_v(CONV_STD_LOGIC_VECTOR((CONV_STD_LOGIC_VECTOR((CONV_STD_LOGIC_VECTOR((((sc_lv<32>)ACC_io_read_b_rsc_d_sdt.range(31,
              0)) , ((sc_lv<32>)ACC_io_read_b_rsc_d_sdt.range(63, 32))), 64) , CONV_STD_LOGIC_VECTOR((((sc_lv<32>)ACC_io_read_b_rsc_d_sdt.range(95,
              64)) , ((sc_lv<32>)ACC_io_read_b_rsc_d_sdt.range(127, 96))), 64)),
              128) , CONV_STD_LOGIC_VECTOR((CONV_STD_LOGIC_VECTOR((((sc_lv<32>)ACC_io_read_b_rsc_d_sdt.range(159,
              128)) , ((sc_lv<32>)ACC_io_read_b_rsc_d_sdt.range(191, 160))), 64)
              , CONV_STD_LOGIC_VECTOR((((sc_lv<32>)ACC_io_read_b_rsc_d_sdt.range(223,
              192)) , ((sc_lv<32>)ACC_io_read_b_rsc_d_sdt.range(255, 224))), 64)),
              128)), 256), ACC_i_1_sva_2))), 32);
          equal_tmp = mc_logic((ACC_i_1_sva_2.bit(0)) & (mc_logic( ~((ACC_i_1_sva_2.bit(2))
              | (ACC_i_1_sva_2.bit(1))))));
          equal_tmp_1 = mc_logic((ACC_i_1_sva_2.bit(1)) & (mc_logic( ~((ACC_i_1_sva_2.bit(2))
              | (ACC_i_1_sva_2.bit(0))))));
          equal_tmp_2 = mc_logic((ACC_i_1_sva_2.bit(1)) & (ACC_i_1_sva_2.bit(0))
              & (NOT((ACC_i_1_sva_2.bit(2)))));
          equal_tmp_3 = mc_logic((ACC_i_1_sva_2.bit(2)) & (mc_logic( ~((ACC_i_1_sva_2.bit(1))
              | (ACC_i_1_sva_2.bit(0))))));
          equal_tmp_4 = mc_logic((ACC_i_1_sva_2.bit(2)) & (ACC_i_1_sva_2.bit(0))
              & (NOT((ACC_i_1_sva_2.bit(1)))));
          equal_tmp_5 = mc_logic((ACC_i_1_sva_2.bit(2)) & (ACC_i_1_sva_2.bit(1))
              & (NOT((ACC_i_1_sva_2.bit(0)))));
          equal_tmp_6 = mc_logic((ACC_i_1_sva_2.bit(2)) & (ACC_i_1_sva_2.bit(1))
              & (ACC_i_1_sva_2.bit(0)));
          io_read_c_rsc_d_sdt_sg7_lpi_1_dfm = MUX_v(CONV_STD_LOGIC_VECTOR((c_rsc_d_1_sg7_lpi_1
              , ACC_acc_4_cmx_sva), 64), equal_tmp_6);
          io_read_c_rsc_d_sdt_sg6_lpi_1_dfm = MUX_v(CONV_STD_LOGIC_VECTOR((c_rsc_d_1_sg6_lpi_1
              , ACC_acc_4_cmx_sva), 64), equal_tmp_5);
          io_read_c_rsc_d_sdt_sg5_lpi_1_dfm = MUX_v(CONV_STD_LOGIC_VECTOR((c_rsc_d_1_sg5_lpi_1
              , ACC_acc_4_cmx_sva), 64), equal_tmp_4);
          io_read_c_rsc_d_sdt_sg4_lpi_1_dfm = MUX_v(CONV_STD_LOGIC_VECTOR((c_rsc_d_1_sg4_lpi_1
              , ACC_acc_4_cmx_sva), 64), equal_tmp_3);
          io_read_c_rsc_d_sdt_sg3_lpi_1_dfm = MUX_v(CONV_STD_LOGIC_VECTOR((c_rsc_d_1_sg3_lpi_1
              , ACC_acc_4_cmx_sva), 64), equal_tmp_2);
          io_read_c_rsc_d_sdt_sg2_lpi_1_dfm = MUX_v(CONV_STD_LOGIC_VECTOR((c_rsc_d_1_sg2_lpi_1
              , ACC_acc_4_cmx_sva), 64), equal_tmp_1);
          io_read_c_rsc_d_sdt_sg1_lpi_1_dfm = MUX_v(CONV_STD_LOGIC_VECTOR((c_rsc_d_1_sg1_lpi_1
              , ACC_acc_4_cmx_sva), 64), equal_tmp);
          io_read_c_rsc_d_sdt_2_lpi_1_dfm = MUX_v(CONV_STD_LOGIC_VECTOR((ACC_acc_4_cmx_sva
              , c_rsc_d_2_lpi_1), 64), mc_logic(equal_tmp | equal_tmp_1 | equal_tmp_2
              | equal_tmp_3 | equal_tmp_4 | equal_tmp_5 | equal_tmp_6));
          c_rsc_mgc_out_stdreg_d_drv = CONV_STD_LOGIC_VECTOR((CONV_STD_LOGIC_VECTOR((CONV_STD_LOGIC_VECTOR((io_read_c_rsc_d_sdt_sg7_lpi_1_dfm
              , io_read_c_rsc_d_sdt_sg6_lpi_1_dfm), 64) , CONV_STD_LOGIC_VECTOR((io_read_c_rsc_d_sdt_sg5_lpi_1_dfm
              , io_read_c_rsc_d_sdt_sg4_lpi_1_dfm), 64)), 128) , CONV_STD_LOGIC_VECTOR((CONV_STD_LOGIC_VECTOR((io_read_c_rsc_d_sdt_sg3_lpi_1_dfm
              , io_read_c_rsc_d_sdt_sg2_lpi_1_dfm), 64) , CONV_STD_LOGIC_VECTOR((io_read_c_rsc_d_sdt_sg1_lpi_1_dfm
              , io_read_c_rsc_d_sdt_2_lpi_1_dfm), 64)), 128)), 256);
          ACC_i_1_sva_1 = CONV_STD_LOGIC_VECTOR((sc_uint<4>)(CONV_UNSIGNED(UNSIGNED(ACC_i_1_sva_2),
              4) + CONV_UNSIGNED(CONV_UNSIGNED((SC_LOGIC_1), 1), 4)), 4);
          wait(clk.posedge_event());
          if (( mc_bool(rst.read()))) goto main;
          // C-Step 2 of Loop 'ACC'
          if (( mc_bool((ACC_i_1_sva_1.bit(3))))) goto ACC;
          ACC_i_1_sva_2 = (sc_lv<3>)ACC_i_1_sva_1.range(2, 0);
          c_rsc_d_1_sg7_lpi_1 = io_read_c_rsc_d_sdt_sg7_lpi_1_dfm;
          c_rsc_d_1_sg6_lpi_1 = io_read_c_rsc_d_sdt_sg6_lpi_1_dfm;
          c_rsc_d_1_sg5_lpi_1 = io_read_c_rsc_d_sdt_sg5_lpi_1_dfm;
          c_rsc_d_1_sg4_lpi_1 = io_read_c_rsc_d_sdt_sg4_lpi_1_dfm;
          c_rsc_d_1_sg3_lpi_1 = io_read_c_rsc_d_sdt_sg3_lpi_1_dfm;
          c_rsc_d_1_sg2_lpi_1 = io_read_c_rsc_d_sdt_sg2_lpi_1_dfm;
          c_rsc_d_1_sg1_lpi_1 = io_read_c_rsc_d_sdt_sg1_lpi_1_dfm;
          c_rsc_d_2_lpi_1 = io_read_c_rsc_d_sdt_2_lpi_1_dfm;
        } ACC:;
      } main:;
      ACC_i_1_sva_2 = CONV_STD_LOGIC_VECTOR(0, 3);
      ACC_io_read_b_rsc_d_sdt = CONV_STD_LOGIC_VECTOR(mc_lv_sc("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
          256);
      ACC_io_read_a_rsc_d_sdt = CONV_STD_LOGIC_VECTOR(mc_lv_sc("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
          256);
      ACC_i_1_sva_1 = CONV_STD_LOGIC_VECTOR(0, 4);
      io_read_c_rsc_d_sdt_2_lpi_1_dfm = CONV_STD_LOGIC_VECTOR(0, 32);
      io_read_c_rsc_d_sdt_sg1_lpi_1_dfm = CONV_STD_LOGIC_VECTOR(0, 32);
      io_read_c_rsc_d_sdt_sg2_lpi_1_dfm = CONV_STD_LOGIC_VECTOR(0, 32);
      io_read_c_rsc_d_sdt_sg3_lpi_1_dfm = CONV_STD_LOGIC_VECTOR(0, 32);
      io_read_c_rsc_d_sdt_sg4_lpi_1_dfm = CONV_STD_LOGIC_VECTOR(0, 32);
      io_read_c_rsc_d_sdt_sg5_lpi_1_dfm = CONV_STD_LOGIC_VECTOR(0, 32);
      io_read_c_rsc_d_sdt_sg6_lpi_1_dfm = CONV_STD_LOGIC_VECTOR(0, 32);
      io_read_c_rsc_d_sdt_sg7_lpi_1_dfm = CONV_STD_LOGIC_VECTOR(0, 32);
      equal_tmp_6 = (SC_LOGIC_0);
      equal_tmp_5 = (SC_LOGIC_0);
      equal_tmp_4 = (SC_LOGIC_0);
      equal_tmp_3 = (SC_LOGIC_0);
      equal_tmp_2 = (SC_LOGIC_0);
      equal_tmp_1 = (SC_LOGIC_0);
      equal_tmp = (SC_LOGIC_0);
      ACC_acc_4_cmx_sva = CONV_STD_LOGIC_VECTOR(0, 32);
      c_rsc_d_1_sg7_lpi_1 = CONV_STD_LOGIC_VECTOR(0, 32);
      c_rsc_d_2_lpi_1 = CONV_STD_LOGIC_VECTOR(0, 32);
      c_rsc_d_1_sg6_lpi_1 = CONV_STD_LOGIC_VECTOR(0, 32);
      c_rsc_d_1_sg1_lpi_1 = CONV_STD_LOGIC_VECTOR(0, 32);
      c_rsc_d_1_sg5_lpi_1 = CONV_STD_LOGIC_VECTOR(0, 32);
      c_rsc_d_1_sg2_lpi_1 = CONV_STD_LOGIC_VECTOR(0, 32);
      c_rsc_d_1_sg4_lpi_1 = CONV_STD_LOGIC_VECTOR(0, 32);
      c_rsc_d_1_sg3_lpi_1 = CONV_STD_LOGIC_VECTOR(0, 32);
      c_rsc_mgc_out_stdreg_d_drv = CONV_STD_LOGIC_VECTOR(mc_lv_sc("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
          256);
    }
  }

};
SC_MODULE_EXPORT(lab1_core);

// ------------------------------------------------------------------
//  Design Unit:    lab1
//  Generated from file(s):
//    2) $PROJECT_HOME/lab1.cpp
// ------------------------------------------------------------------



SC_MODULE(lab1) {
  public : sc_in< sc_lv<256> > a_rsc_z;
  public : sc_in< sc_lv<256> > b_rsc_z;
  public : sc_out< sc_lv<256> > c_rsc_z;
  private: mc_out< sc_lv<256> > c_rsc_z_drv;
  public : sc_in< bool > clk;
  public : sc_in< sc_logic > rst;

  // Interconnect Declarations
  sc_signal< sc_lv<256> > a_rsc_mgc_in_wire_d;
  sc_signal< sc_lv<256> > b_rsc_mgc_in_wire_d;
  sc_signal< sc_lv<256> > c_rsc_mgc_out_stdreg_d;

  mgc_in_wire</* rscid= */ 1, /* width= */ 256> *a_rsc_mgc_in_wire;
  mgc_in_wire</* rscid= */ 2, /* width= */ 256> *b_rsc_mgc_in_wire;
  mgc_out_stdreg</* rscid= */ 3, /* width= */ 256> *c_rsc_mgc_out_stdreg;
  lab1_core *lab1_core_inst;
  // Default Constants


  SC_HAS_PROCESS(lab1);
  public: lab1(const sc_module_name& module_name, const char * hdl_name=0) : sc_module(module_name)
    , a_rsc_z("a_rsc_z")
    , b_rsc_z("b_rsc_z")
    , c_rsc_z("c_rsc_z")
    , c_rsc_z_drv(c_rsc_z)
    , clk("clk")
    , rst("rst")
    , a_rsc_mgc_in_wire_d("a_rsc_mgc_in_wire_d")
    , b_rsc_mgc_in_wire_d("b_rsc_mgc_in_wire_d")
    , c_rsc_mgc_out_stdreg_d("c_rsc_mgc_out_stdreg_d")
  {
    // Default Constant Signal Assignments

    a_rsc_mgc_in_wire = new mgc_in_wire</* rscid= */ 1, /* width= */ 256>("a_rsc_mgc_in_wire");
    a_rsc_mgc_in_wire->d(a_rsc_mgc_in_wire_d);
    a_rsc_mgc_in_wire->z(a_rsc_z);

    b_rsc_mgc_in_wire = new mgc_in_wire</* rscid= */ 2, /* width= */ 256>("b_rsc_mgc_in_wire");
    b_rsc_mgc_in_wire->d(b_rsc_mgc_in_wire_d);
    b_rsc_mgc_in_wire->z(b_rsc_z);

    c_rsc_mgc_out_stdreg = new mgc_out_stdreg</* rscid= */ 3, /* width= */ 256>("c_rsc_mgc_out_stdreg");
    c_rsc_mgc_out_stdreg->d(c_rsc_mgc_out_stdreg_d);
    c_rsc_mgc_out_stdreg->z(c_rsc_z_drv);

    lab1_core_inst = new lab1_core("lab1_core_inst");
    lab1_core_inst->clk(clk);
    lab1_core_inst->rst(rst);
    lab1_core_inst->a_rsc_mgc_in_wire_d(a_rsc_mgc_in_wire_d);
    lab1_core_inst->b_rsc_mgc_in_wire_d(b_rsc_mgc_in_wire_d);
    lab1_core_inst->c_rsc_mgc_out_stdreg_d(c_rsc_mgc_out_stdreg_d);

    SC_METHOD(IDLE_CONC); 
  }

private:
  void IDLE_CONC() {
  }

};
SC_MODULE_EXPORT(lab1);

} 


