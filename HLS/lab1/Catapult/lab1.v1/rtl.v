// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.62 Production Release
//  HLS Date:       Wed Nov 23 15:08:20 PST 2011
// 
//  Generated by:   xph3seiaba@cimeld20
//  Generated date: Fri Oct 24 14:18:56 2014
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    lab1_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module lab1_core_fsm (
  clk, rst, fsm_output, st_ACC_1_tr0
);
  input clk;
  input rst;
  output [2:0] fsm_output;
  reg [2:0] fsm_output;
  input st_ACC_1_tr0;


  // FSM State Type Declaration for lab1_core_fsm_1
  parameter
    st_main = 2'd0,
    st_ACC = 2'd1,
    st_ACC_1 = 2'd2,
    state_x = 2'b00;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;

  always @(st_ACC_1_tr0 or state_var)
  begin : lab1_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 3'b1;
        state_var_NS = st_ACC;
      end
      st_ACC : begin
        fsm_output = 3'b10;
        state_var_NS = st_ACC_1;
      end
      st_ACC_1 : begin
        fsm_output = 3'b100;
        if ( st_ACC_1_tr0 ) begin
          state_var_NS = st_main;
        end
        else begin
          state_var_NS = st_ACC;
        end
      end
      default : begin
        fsm_output = 3'b000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= st_main;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    lab1_core
// ------------------------------------------------------------------


module lab1_core (
  clk, rst, a_rsc_mgc_in_wire_d, b_rsc_mgc_in_wire_d, c_rsc_mgc_out_stdreg_d
);
  input clk;
  input rst;
  input [255:0] a_rsc_mgc_in_wire_d;
  input [255:0] b_rsc_mgc_in_wire_d;
  output [255:0] c_rsc_mgc_out_stdreg_d;
  reg [255:0] c_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [2:0] fsm_output;
  wire or_dcpl_46;
  wire or_dcpl_50;
  wire or_dcpl_54;
  reg [31:0] c_rsc_d_1_sg3_lpi_1;
  reg [31:0] c_rsc_d_1_sg4_lpi_1;
  reg [31:0] c_rsc_d_1_sg2_lpi_1;
  reg [31:0] c_rsc_d_1_sg5_lpi_1;
  reg [31:0] c_rsc_d_1_sg1_lpi_1;
  reg [31:0] c_rsc_d_1_sg6_lpi_1;
  reg [31:0] c_rsc_d_2_lpi_1;
  reg [31:0] c_rsc_d_1_sg7_lpi_1;
  reg [31:0] io_read_c_rsc_d_sdt_sg7_lpi_1_dfm;
  reg [31:0] io_read_c_rsc_d_sdt_sg6_lpi_1_dfm;
  reg [31:0] io_read_c_rsc_d_sdt_sg5_lpi_1_dfm;
  reg [31:0] io_read_c_rsc_d_sdt_sg4_lpi_1_dfm;
  reg [31:0] io_read_c_rsc_d_sdt_sg3_lpi_1_dfm;
  reg [31:0] io_read_c_rsc_d_sdt_sg2_lpi_1_dfm;
  reg [31:0] io_read_c_rsc_d_sdt_sg1_lpi_1_dfm;
  reg [31:0] io_read_c_rsc_d_sdt_2_lpi_1_dfm;
  reg [3:0] ACC_i_1_sva_1;
  wire [4:0] xACC_i_1_sva_1;
  reg [2:0] ACC_i_1_sva_2;
  wire [31:0] io_read_c_rsc_d_sdt_sg7_lpi_1_dfm_mx0;
  wire [31:0] io_read_c_rsc_d_sdt_sg6_lpi_1_dfm_mx0;
  wire [31:0] io_read_c_rsc_d_sdt_sg5_lpi_1_dfm_mx0;
  wire [31:0] io_read_c_rsc_d_sdt_sg4_lpi_1_dfm_mx0;
  wire [31:0] io_read_c_rsc_d_sdt_sg3_lpi_1_dfm_mx0;
  wire [31:0] io_read_c_rsc_d_sdt_sg2_lpi_1_dfm_mx0;
  wire [31:0] io_read_c_rsc_d_sdt_sg1_lpi_1_dfm_mx0;
  wire [31:0] io_read_c_rsc_d_sdt_2_lpi_1_dfm_mx0;
  wire [31:0] ACC_acc_4_cmx_sva;
  wire [32:0] xACC_acc_4_cmx_sva;

  wire[31:0] ACC_mux_8_nl;
  wire[31:0] ACC_mux_9_nl;
  //Interconnect Declarations for Component Instantiations 
  wire [0:0] xst_ACC_1_tr0slc_ACC_i_1_sva_1_1;
  assign xst_ACC_1_tr0slc_ACC_i_1_sva_1_1 = ACC_i_1_sva_1[3];
  lab1_core_fsm lab1_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .st_ACC_1_tr0(xst_ACC_1_tr0slc_ACC_i_1_sva_1_1)
    );
  assign io_read_c_rsc_d_sdt_sg7_lpi_1_dfm_mx0 = MUX_v_32_2_2({ACC_acc_4_cmx_sva
      , c_rsc_d_1_sg7_lpi_1}, or_dcpl_46 | (~ (ACC_i_1_sva_2[0])));
  assign io_read_c_rsc_d_sdt_sg6_lpi_1_dfm_mx0 = MUX_v_32_2_2({ACC_acc_4_cmx_sva
      , c_rsc_d_1_sg6_lpi_1}, or_dcpl_46 | (ACC_i_1_sva_2[0]));
  assign io_read_c_rsc_d_sdt_sg5_lpi_1_dfm_mx0 = MUX_v_32_2_2({ACC_acc_4_cmx_sva
      , c_rsc_d_1_sg5_lpi_1}, or_dcpl_50 | (~ (ACC_i_1_sva_2[0])));
  assign io_read_c_rsc_d_sdt_sg4_lpi_1_dfm_mx0 = MUX_v_32_2_2({ACC_acc_4_cmx_sva
      , c_rsc_d_1_sg4_lpi_1}, or_dcpl_50 | (ACC_i_1_sva_2[0]));
  assign io_read_c_rsc_d_sdt_sg3_lpi_1_dfm_mx0 = MUX_v_32_2_2({ACC_acc_4_cmx_sva
      , c_rsc_d_1_sg3_lpi_1}, or_dcpl_54 | (~ (ACC_i_1_sva_2[0])));
  assign io_read_c_rsc_d_sdt_sg2_lpi_1_dfm_mx0 = MUX_v_32_2_2({ACC_acc_4_cmx_sva
      , c_rsc_d_1_sg2_lpi_1}, or_dcpl_54 | (ACC_i_1_sva_2[0]));
  assign io_read_c_rsc_d_sdt_sg1_lpi_1_dfm_mx0 = MUX_v_32_2_2({ACC_acc_4_cmx_sva
      , c_rsc_d_1_sg1_lpi_1}, (ACC_i_1_sva_2[2]) | (ACC_i_1_sva_2[1]) | (~ (ACC_i_1_sva_2[0])));
  assign io_read_c_rsc_d_sdt_2_lpi_1_dfm_mx0 = MUX_v_32_2_2({c_rsc_d_2_lpi_1 , ACC_acc_4_cmx_sva},
      ~((ACC_i_1_sva_2[2]) | (ACC_i_1_sva_2[1]) | (ACC_i_1_sva_2[0])));
  assign ACC_mux_8_nl = MUX_v_32_8_2({(a_rsc_mgc_in_wire_d[31:0]) , (a_rsc_mgc_in_wire_d[63:32])
      , (a_rsc_mgc_in_wire_d[95:64]) , (a_rsc_mgc_in_wire_d[127:96]) , (a_rsc_mgc_in_wire_d[159:128])
      , (a_rsc_mgc_in_wire_d[191:160]) , (a_rsc_mgc_in_wire_d[223:192]) , (a_rsc_mgc_in_wire_d[255:224])},
      ACC_i_1_sva_2);
  assign ACC_mux_9_nl = MUX_v_32_8_2({(b_rsc_mgc_in_wire_d[31:0]) , (b_rsc_mgc_in_wire_d[63:32])
      , (b_rsc_mgc_in_wire_d[95:64]) , (b_rsc_mgc_in_wire_d[127:96]) , (b_rsc_mgc_in_wire_d[159:128])
      , (b_rsc_mgc_in_wire_d[191:160]) , (b_rsc_mgc_in_wire_d[223:192]) , (b_rsc_mgc_in_wire_d[255:224])},
      ACC_i_1_sva_2);
  assign xACC_acc_4_cmx_sva = (ACC_mux_8_nl) + (ACC_mux_9_nl);
  assign ACC_acc_4_cmx_sva = xACC_acc_4_cmx_sva[31:0];
  assign or_dcpl_46 = ~((ACC_i_1_sva_2[2]) & (ACC_i_1_sva_2[1]));
  assign or_dcpl_50 = (~ (ACC_i_1_sva_2[2])) | (ACC_i_1_sva_2[1]);
  assign or_dcpl_54 = (ACC_i_1_sva_2[2]) | (~ (ACC_i_1_sva_2[1]));
  always @(posedge clk) begin
    if ( rst ) begin
      ACC_i_1_sva_2 <= 3'b0;
      c_rsc_d_2_lpi_1 <= 32'b0;
      c_rsc_d_1_sg1_lpi_1 <= 32'b0;
      c_rsc_d_1_sg2_lpi_1 <= 32'b0;
      c_rsc_d_1_sg3_lpi_1 <= 32'b0;
      c_rsc_d_1_sg4_lpi_1 <= 32'b0;
      c_rsc_d_1_sg5_lpi_1 <= 32'b0;
      c_rsc_d_1_sg6_lpi_1 <= 32'b0;
      c_rsc_d_1_sg7_lpi_1 <= 32'b0;
      c_rsc_mgc_out_stdreg_d <= 256'b0;
      ACC_i_1_sva_1 <= 4'b0;
      io_read_c_rsc_d_sdt_sg7_lpi_1_dfm <= 32'b0;
      io_read_c_rsc_d_sdt_sg6_lpi_1_dfm <= 32'b0;
      io_read_c_rsc_d_sdt_sg5_lpi_1_dfm <= 32'b0;
      io_read_c_rsc_d_sdt_sg4_lpi_1_dfm <= 32'b0;
      io_read_c_rsc_d_sdt_sg3_lpi_1_dfm <= 32'b0;
      io_read_c_rsc_d_sdt_sg2_lpi_1_dfm <= 32'b0;
      io_read_c_rsc_d_sdt_sg1_lpi_1_dfm <= 32'b0;
      io_read_c_rsc_d_sdt_2_lpi_1_dfm <= 32'b0;
    end
    else begin
      ACC_i_1_sva_2 <= (ACC_i_1_sva_1[2:0]) & (signext_3_1(fsm_output[2]));
      c_rsc_d_2_lpi_1 <= io_read_c_rsc_d_sdt_2_lpi_1_dfm;
      c_rsc_d_1_sg1_lpi_1 <= MUX_v_32_2_2({c_rsc_d_1_sg1_lpi_1 , io_read_c_rsc_d_sdt_sg1_lpi_1_dfm},
          fsm_output[2]);
      c_rsc_d_1_sg2_lpi_1 <= MUX_v_32_2_2({c_rsc_d_1_sg2_lpi_1 , io_read_c_rsc_d_sdt_sg2_lpi_1_dfm},
          fsm_output[2]);
      c_rsc_d_1_sg3_lpi_1 <= MUX_v_32_2_2({c_rsc_d_1_sg3_lpi_1 , io_read_c_rsc_d_sdt_sg3_lpi_1_dfm},
          fsm_output[2]);
      c_rsc_d_1_sg4_lpi_1 <= MUX_v_32_2_2({c_rsc_d_1_sg4_lpi_1 , io_read_c_rsc_d_sdt_sg4_lpi_1_dfm},
          fsm_output[2]);
      c_rsc_d_1_sg5_lpi_1 <= MUX_v_32_2_2({c_rsc_d_1_sg5_lpi_1 , io_read_c_rsc_d_sdt_sg5_lpi_1_dfm},
          fsm_output[2]);
      c_rsc_d_1_sg6_lpi_1 <= MUX_v_32_2_2({c_rsc_d_1_sg6_lpi_1 , io_read_c_rsc_d_sdt_sg6_lpi_1_dfm},
          fsm_output[2]);
      c_rsc_d_1_sg7_lpi_1 <= MUX_v_32_2_2({c_rsc_d_1_sg7_lpi_1 , io_read_c_rsc_d_sdt_sg7_lpi_1_dfm},
          fsm_output[2]);
      c_rsc_mgc_out_stdreg_d <= MUX_v_256_2_2({c_rsc_mgc_out_stdreg_d , ({io_read_c_rsc_d_sdt_sg7_lpi_1_dfm_mx0
          , io_read_c_rsc_d_sdt_sg6_lpi_1_dfm_mx0 , io_read_c_rsc_d_sdt_sg5_lpi_1_dfm_mx0
          , io_read_c_rsc_d_sdt_sg4_lpi_1_dfm_mx0 , io_read_c_rsc_d_sdt_sg3_lpi_1_dfm_mx0
          , io_read_c_rsc_d_sdt_sg2_lpi_1_dfm_mx0 , io_read_c_rsc_d_sdt_sg1_lpi_1_dfm_mx0
          , io_read_c_rsc_d_sdt_2_lpi_1_dfm_mx0})}, fsm_output[1]);
      ACC_i_1_sva_1 <= xACC_i_1_sva_1[3:0];
      io_read_c_rsc_d_sdt_sg7_lpi_1_dfm <= io_read_c_rsc_d_sdt_sg7_lpi_1_dfm_mx0;
      io_read_c_rsc_d_sdt_sg6_lpi_1_dfm <= io_read_c_rsc_d_sdt_sg6_lpi_1_dfm_mx0;
      io_read_c_rsc_d_sdt_sg5_lpi_1_dfm <= io_read_c_rsc_d_sdt_sg5_lpi_1_dfm_mx0;
      io_read_c_rsc_d_sdt_sg4_lpi_1_dfm <= io_read_c_rsc_d_sdt_sg4_lpi_1_dfm_mx0;
      io_read_c_rsc_d_sdt_sg3_lpi_1_dfm <= io_read_c_rsc_d_sdt_sg3_lpi_1_dfm_mx0;
      io_read_c_rsc_d_sdt_sg2_lpi_1_dfm <= io_read_c_rsc_d_sdt_sg2_lpi_1_dfm_mx0;
      io_read_c_rsc_d_sdt_sg1_lpi_1_dfm <= io_read_c_rsc_d_sdt_sg1_lpi_1_dfm_mx0;
      io_read_c_rsc_d_sdt_2_lpi_1_dfm <= io_read_c_rsc_d_sdt_2_lpi_1_dfm_mx0;
    end
  end
  assign xACC_i_1_sva_1  = conv_u2u_3_4(ACC_i_1_sva_2) + 4'b1;

  function [31:0] MUX_v_32_2_2;
    input [63:0] inputs;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[63:32];
      end
      1'b1 : begin
        result = inputs[31:0];
      end
      default : begin
        result = inputs[63:32];
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function [31:0] MUX_v_32_8_2;
    input [255:0] inputs;
    input [2:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = inputs[255:224];
      end
      3'b001 : begin
        result = inputs[223:192];
      end
      3'b010 : begin
        result = inputs[191:160];
      end
      3'b011 : begin
        result = inputs[159:128];
      end
      3'b100 : begin
        result = inputs[127:96];
      end
      3'b101 : begin
        result = inputs[95:64];
      end
      3'b110 : begin
        result = inputs[63:32];
      end
      3'b111 : begin
        result = inputs[31:0];
      end
      default : begin
        result = inputs[255:224];
      end
    endcase
    MUX_v_32_8_2 = result;
  end
  endfunction


  function [2:0] signext_3_1;
    input [0:0] vector;
  begin
    signext_3_1= {{2{vector[0]}}, vector};
  end
  endfunction


  function [255:0] MUX_v_256_2_2;
    input [511:0] inputs;
    input [0:0] sel;
    reg [255:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[511:256];
      end
      1'b1 : begin
        result = inputs[255:0];
      end
      default : begin
        result = inputs[511:256];
      end
    endcase
    MUX_v_256_2_2 = result;
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    lab1
//  Generated from file(s):
//    2) $PROJECT_HOME/lab1.cpp
// ------------------------------------------------------------------


module lab1 (
  a_rsc_z, b_rsc_z, c_rsc_z, clk, rst
);
  input [255:0] a_rsc_z;
  input [255:0] b_rsc_z;
  output [255:0] c_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire [255:0] a_rsc_mgc_in_wire_d;
  wire [255:0] b_rsc_mgc_in_wire_d;
  wire [255:0] c_rsc_mgc_out_stdreg_d;

  mgc_in_wire #(.rscid(1),
  .width(256)) a_rsc_mgc_in_wire (
      .d(a_rsc_mgc_in_wire_d),
      .z(a_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(256)) b_rsc_mgc_in_wire (
      .d(b_rsc_mgc_in_wire_d),
      .z(b_rsc_z)
    );
  mgc_out_stdreg #(.rscid(3),
  .width(256)) c_rsc_mgc_out_stdreg (
      .d(c_rsc_mgc_out_stdreg_d),
      .z(c_rsc_z)
    );
  lab1_core lab1_core_inst (
      .clk(clk),
      .rst(rst),
      .a_rsc_mgc_in_wire_d(a_rsc_mgc_in_wire_d),
      .b_rsc_mgc_in_wire_d(b_rsc_mgc_in_wire_d),
      .c_rsc_mgc_out_stdreg_d(c_rsc_mgc_out_stdreg_d)
    );
endmodule



